import { useState } from "react";
import { GoogleGenerativeAI } from "@google/generative-ai";
import "./App.css";
import Navbar from "./assets/components/Navbar";
import Hero from "./assets/components/Hero";
import LoginModal from "./assets/components/LoginModal";

//Here is where my great project starts
// const { VITE_BARD_API_KEY } = import.meta.env;
const VITE_BARD_API_KEY = "AIzaSyAxLcGOVqcpZawWCgOcA7o84ag3KmRhXDU";

function App() {
  const [generatedText, setGeneratedText] = useState(null);
  const [loading, setLoading] = useState(false);
  const [skinTone, setSkinTone] = useState("");
  const [hairColor, setHairColor] = useState("");
  const [eyeColor, setEyeColor] = useState(""); // Think in adding validation to ensure that a valid color (HEX format) is provided
  const [uploadedPhoto, setUploadedPhoto] = useState(null); // State for uploaded photo

  const runColorAnalysis = async () => {
    setLoading(true);
    console.log(VITE_BARD_API_KEY);
    try {
      const genAI = new GoogleGenerativeAI(VITE_BARD_API_KEY); // Enviroment Variable
      const model = genAI.getGenerativeModel({ model: "gemini-pro" }); // Enviroment Variable

      // Dynamic prompt based on user inputs
      const prompt = `You are a professional color analyst consultant with 20+ years of experience. You will give your client insights 
      about their seasonal color palette based on the HEX codes of their skin tone, hair color, and eye color:
      \nSkin tone: ${skinTone}\nHair color: ${hairColor}\nEye color: ${eyeColor}`;

      const result = await model.generateContent(prompt); // method (documentation Google AI) responsable for sending the prompt to the generative model and returning a result
      // Generate content based on the prompt
      const response = await result.response;
      const text = await response.text();
    
  
      setGeneratedText(text); // text is the variable that contains the text content generated by Google AI based on the prompt
    } catch (error) {
      setGeneratedText("There was an error in your petition");
      console.error(error);
    }
    setLoading(false);
  };

  // Component to upload the user's photo and then use the color picker
  const handleFileUpload = (event) => {
    const file = event.target.files[0];
    setUploadedPhoto(file);
  };

  const goBack = () => {
    setGeneratedText(null);
    setUploadedPhoto(null);
  };

  return (
    <>
      
      {/* Navbar Section */}
      <Navbar/> 
      {/* Hero Section */}
      <Hero/> 
      {/*Login Section */}
      <LoginModal/>

      {/* First Page */}
      {!generatedText && (
        <div className="container mt-5">
          {/* Container 1: Upload Photo and Display */}
          <div className="row">
            <div className="col-md-6">
              <h2>1. Upload your photo</h2>
              <input type="file" accept="image/*" onChange={handleFileUpload} />
            </div>
            <div className="col-md-6">
              <h2>Uploaded Photo</h2>
              {uploadedPhoto && (
                <div className="uploaded-photo-container">
                  <img
                    src={URL.createObjectURL(uploadedPhoto)}
                    alt="Uploaded"
                    className="img-fluid"
                    style={{ maxWidth: "300px", maxHeight: "300px" }}
                  />
                </div>
              )}
            </div>
          </div>

          {/* Container 2: Color Pickers and Generate Text Button */}
          <div className="row mt-5">
            <div className="col-md-6">
              <h2>2. Pick your colors</h2>
              <label>
                Skin Tone:
                <input
                  type="color"
                  value={skinTone}
                  onChange={(e) => setSkinTone(e.target.value)}
                />
              </label>
              <label>
                Hair Color:
                <input
                  type="color"
                  value={hairColor}
                  onChange={(e) => setHairColor(e.target.value)}
                />
              </label>
              <label>
                Eye Color:
                <input
                  type="color"
                  value={eyeColor}
                  onChange={(e) => setEyeColor(e.target.value)}
                />
              </label>
            </div>
            <div className="col-md-6">
              <button
                className="btn btn-primary"
                onClick={runColorAnalysis}
                disabled={loading}
              >
                {loading ? "Generating..." : "Get my color analysis"}
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Second Page */}
      {generatedText && (
        <div className="container mt-5">
          <div className="row">
            {/* Container 1: Uploaded Photo */}
            <div className="col-md-6">
              <h2>Your Photo</h2>
              {uploadedPhoto && (
                <img
                  src={URL.createObjectURL(uploadedPhoto)}
                  alt="Uploaded"
                  className="img-fluid"
                />
              )}
            </div>
            {/* Container 2: Answer Container */}
            <div className="col-md-6">
              <h2>Your analysis:</h2>
              <p>{generatedText}</p>
              <button className="btn btn-primary" onClick={goBack}>
                Go Back
              </button>
            </div>
          </div>
        </div>
      )}
    </>
  );
}

export default App;
